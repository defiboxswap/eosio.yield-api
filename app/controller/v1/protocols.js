'use strict';
const BaseController = require('../base_controller');

/**
 * @Controller protocols
 */
class ProtocolsController extends BaseController {
  /**
   * @Summary Get protocols
   * @Router get /v1/protocols
   * @Request query number pageNo page no
   * @Request query number pageSize page size
   * @Request query string search fuzzy search metadata name
   * @Request query string category protocol category
   * @Request query string status enum:pending,active,denied
   * @Request query string order enum:tvl_usd,tvl_usd_change,agg_rewards,create_at
   * @response 200 protocol resp
   */
  async protocol_page() {
    const { app, ctx } = this;
    const db = app.mysql.get('yield');
    const rules = {
      pageNo: { type: 'number', required: false },
      pageSize: { type: 'number', required: false },
      search: { type: 'string', trim: true, required: false },
      category: { type: 'string', trim: true, required: false },
      status: { type: 'enum', trim: true, required: false, values: ['pending', 'active', 'denied'] },
      order: {
        type: 'enum',
        trim: true,
        required: false,
        values: ['tvl_usd', 'tvl_usd_change', 'agg_rewards', 'create_at'],
      },
    };
    const params = {
      pageNo: ctx.request.query.pageNo ? parseInt(ctx.request.query.pageNo) : 1,
      pageSize: ctx.request.query.pageSize ? parseInt(ctx.request.query.pageSize) : 100,
      search: ctx.request.query.search,
      category: ctx.request.query.category,
      status: ctx.request.query.status,
      order: ctx.request.query.order || 'tvl_usd',
    };
    // validate
    ctx.validate(rules, params);
    // Limit the maximum number of rows
    if (params.pageSize > 300) params.pageSize = 300;

    let sql = 'select * from protocol where is_delete = 0 ';
    if (params.search) {
      sql += ' and metadata_name like :search ';
    }
    if (params.category) {
      sql += ' and category = :category ';
    }
    if (params.status) {
      sql += ' and status = :status ';
    }
    sql += ` order by ${params.order} desc limit :offset, :limit `;
    const data = await db.query(sql, {
      search: '%' + params.search + '%',
      status: params.status,
      category: params.category,
      offset: (params.pageNo - 1) * params.pageSize,
      limit: params.pageSize,
    });

    super.success(data);
  }

  /**
   * @Summary Get protocol detail.
   * @Router get /v1/protocols/{name}
   * @Request path string *name protocol name
   * @response 200 protocol resp
   **/
  async protocol_show() {
    const { app, ctx } = this;
    const db = app.mysql.get('yield');
    const rules = {
      name: { type: 'string', required: true },
    };
    const params = {
      name: ctx.params.name,
    };
    ctx.validate(rules, params);

    const data = await db.get('protocol', { name: params.name });
    if (data) {
      const rankResult = await db.queryOne(
        'select count(*) + 1 rank from protocol where is_delete = 0 and tvl_eos > ?',
        [data.tvl_eos]
      );
      data.rank = rankResult.rank;
    }
    super.success(data);
  }

  /**
   * @Summary Get current protocol category stats.
   * @Router get /v1/protocols/categorystats
   * @response 200 protocolt_category_stat resp
   **/
  async protocol_category_stat_list() {
    const { app } = this;
    const db = app.mysql.get('yield');
    const data = await db.select('protocol_category_stat');
    super.success(data);
  }

  /**
   * @Summary Get protocol category stat detail.
   * @Router get /v1/protocols/categorystats/{category}
   * @Request path string *category protocol category
   * @response 200 protocolt_category_stat resp
   **/
  async protocol_category_stat_show() {
    const { app, ctx } = this;
    const db = app.mysql.get('yield');
    const rules = {
      category: { type: 'string', required: true },
    };
    const params = {
      category: ctx.params.category,
    };
    // validate
    ctx.validate(rules, params);

    const data = await db.get('protocol_category_stat', { category: params.category });
    super.success(data);
  }

  /**
   * @Summary Get current protocol stat.
   * @Router get /v1/protocols/stat
   * @response 200 protocol_stat resp
   **/
  async protocol_stat_show() {
    const { app } = this;
    const db = app.mysql.get('yield');
    const data = await db.get('protocol_stat');
    super.success(data);
  }

  /**
   * @Summary sparkline.
   * @Router get /v1/protocols/{name}/sparkline
   * @produce image/svg
   * @Request query string *tvl_type enum:tvl_usd,tvl_eos
   * @Request path string *name protocol name
   * @response 200 string (The sparkline svg) eg:(<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" width="135" height="50" viewBox="0 0 135 50" shape-rendering="auto"><polyline points="0, 26.793124711600708 0.54, 26.868283859312587 1.08, 26.730416803485944 1.62, 27.046039782747766 2.16, 27.589660073148103 2.7, 27.733808701249696 3.24, 27.717471272767703 3.7800000000000002, 27.740946076295742 4.32, 27.850428942564697 4.86, 27.177239695856432 5.4, 26.373004733346416 5.94, 26.612135969851703 6.48, 27.156129868441713 7.0200000000000005, 27.389664005102297 7.5600000000000005, 28.46207278067507 8.100000000000001, 29.039248812955083 8.64, 29.66759982894566 9.18, 29.070992697890073 9.719999999999999, 28.582101338139815 10.259999999999998, 29.304852130671144 10.799999999999997, 29.492783918727934 11.339999999999996, 29.665195107280283 11.879999999999995, 30.015677173827044 12.419999999999995, 30.02019983177612 12.959999999999994, 30.46591424771031 13.499999999999993, 29.71765622618621 14.039999999999992, 29.112498090419166 14.579999999999991, 29.625656849464367 15.11999999999999, 31.09702869862085 15.65999999999999, 31.47599235062201 16.19999999999999, 32.8646470687508 16.739999999999988, 32.965383058053554 17.279999999999987, 33.47086938202818 17.819999999999986, 33.54745149768086 18.359999999999985, 33.54888936055666 18.899999999999984, 33.94235983036857 19.439999999999984, 34.44102620348312 19.979999999999983, 32.80504278661158 20.519999999999982, 32.46374742208225 21.05999999999998, 31.48958440332797 21.59999999999998, 30.993251364236755 22.13999999999998, 30.481810307624414 22.67999999999998, 30.116425897141653 23.219999999999978, 30.316252332714665 23.759999999999977, 30.39482072268629 24.299999999999976, 28.428991592969933 24.839999999999975, 28.629136147311367 25.379999999999974, 28.097195106687533 25.919999999999973, 27.58777837207795 26.459999999999972, 26.958135509880638 26.99999999999997, 26.431411864021335 27.53999999999997, 25.688600758178165 28.07999999999997, 23.741861455720056 28.61999999999997, 21.067993175934124 29.159999999999968, 20.108508305331704 29.699999999999967, 19.3393884995083 30.239999999999966, 18.9095107952755 30.779999999999966, 18.330114105682995 31.319999999999965, 17.783535974448554 31.859999999999964, 16.902641566104904 32.39999999999996, 15.778943046363372 32.93999999999996, 15.472398028375487 33.47999999999996, 15.254894623451214 34.01999999999996, 15.174334865556037 34.55999999999996, 15.300562031279105 35.09999999999996, 15.232606398298849 35.63999999999996, 14.991640846682605 36.17999999999996, 14.30439054975364 36.719999999999956, 13.19857775998163 37.259999999999955, 12.810669197836292 37.799999999999955, 12.655126330295754 38.339999999999954, 12.407017152391306 38.87999999999995, 12.166160650221888 39.41999999999995, 11.942473609150172 39.95999999999995, 11.705771404696616 40.49999999999995, 11.310411207528276 41.03999999999995, 8.587701586758357 41.57999999999995, 7.971209177171755 42.11999999999995, 7.56649071611742 42.65999999999995, 6.222810907100087 43.199999999999946, 5.636783501780969 43.739999999999945, 5.36285036528024 44.279999999999944, 5.205774477066387 44.81999999999994, 6.099007911351408 45.35999999999994, 3.781448241697448 45.89999999999994, 2.9719478038812497 46.43999999999994, 2.6102851205910658 46.97999999999994, 1.2676210998389907 47.51999999999994, 0.8582733238395285 48.05999999999994, 0.8061772466061375 48.59999999999994, 0.649137939735407 49.13999999999994, 1.614582790931919 49.679999999999936, 0 50.219999999999935, 3.1134908216337154 50.759999999999934, 2.870354391114954 51.29999999999993, 1.8256711865725417 51.83999999999993, 1.7964907739838503 52.37999999999993, 1.845617897063727 52.91999999999993, 1.840743703212121 53.45999999999993, 2.7446129700615307 53.99999999999993, 2.948021984806876 54.53999999999993, 6.104455367263026 55.07999999999993, 5.933966242739725 55.619999999999926, 5.961729321223111 56.159999999999926, 6.138408950542768 56.699999999999925, 6.065887286797369 57.239999999999924, 6.061013092945853 57.77999999999992, 5.934060242899794 58.31999999999992, 5.970169269916179 58.85999999999992, 9.424233399020336 59.39999999999992, 9.528342357942947 59.93999999999992, 9.805145277656447 60.47999999999992, 9.926479264273894 61.01999999999992, 9.739128687387597 61.55999999999992, 9.734622545065966 62.099999999999916, 9.535458278108415 62.639999999999915, 9.33591415171903 63.179999999999914, 9.14987085620534 63.719999999999914, 8.97542361492425 64.25999999999992, 9.217449330907689 64.79999999999993, 9.199521771638674 65.33999999999993, 9.251180339095647 65.87999999999994, 9.129557174645841 66.41999999999994, 8.981079754278435 66.95999999999995, 9.181552074366921 67.49999999999996, 9.666742853101852 68.03999999999996, 10.068133106517298 68.57999999999997, 10.541350518390145 69.11999999999998, 11.024229881037318 69.65999999999998, 11.340278948052724 70.19999999999999, 11.462860867830141 70.74, 11.548727390100208 71.28, 12.041871986979443 71.82000000000001, 12.425391482536245 72.36000000000001, 13.184771544349369 72.90000000000002, 13.34118673028854 73.44000000000003, 13.920287373399779 73.98000000000003, 14.794933086371886 74.52000000000004, 14.917110527627871 75.06000000000004, 15.00297704989794 75.60000000000005, 15.49741248969821 76.14000000000006, 15.970903181182633 76.68000000000006, 15.484997214037454 77.22000000000007, 15.42532509434433 77.76000000000008, 15.954737160217542 78.30000000000008, 16.727973216072904 78.84000000000009, 16.8100092704069 79.3800000000001, 17.044353213044374 79.9200000000001, 17.210286957067034 80.46000000000011, 17.294210191955194 81.00000000000011, 16.378001976340204 81.54000000000012, 16.210795757243947 82.08000000000013, 16.132183762928808 82.62000000000013, 16.609679262547676 83.16000000000014, 16.276399534001854 83.70000000000014, 16.276399534001854 84.24000000000015, 16.06147573117221 84.78000000000016, 15.790071260718772 85.32000000000016, 14.386062025470011 85.86000000000017, 14.866752758773893 86.40000000000018, 15.283814644791855 86.94000000000018, 16.72257252871373 87.48000000000019, 16.591508753767965 88.0200000000002, 16.87020371611279 88.5600000000002, 17.000656875897093 89.10000000000021, 17.07307998610841 89.64000000000021, 17.37161145186015 90.18000000000022, 20.616116270029742 90.72000000000023, 21.51508000964089 91.26000000000023, 23.005501477448657 91.80000000000024, 23.101396381330666 92.34000000000024, 23.380091343675407 92.88000000000025, 23.72574567621994 93.42000000000026, 24.14874114869837 93.96000000000026, 24.858815965617563 94.50000000000027, 29.442195934375114 95.04000000000028, 31.11155434733403 95.58000000000028, 34.88009493157972 96.12000000000029, 35.42249715586614 96.6600000000003, 36.32624849804843 97.2000000000003, 36.97108720386056 97.74000000000031, 37.96734566254562 98.28000000000031, 38.53860647621251 98.82000000000032, 42.51196808417659 99.36000000000033, 43.57002053480572 99.90000000000033, 45.79859932877369 100.44000000000034, 46.30436773040441 100.98000000000035, 46.7512894850123 101.52000000000035, 46.914833479480464 102.06000000000036, 47.53262244299947 102.60000000000036, 44.16283694347737 103.14000000000037, 45.565045820979975 103.68000000000038, 46.33014654114051 104.22000000000038, 48.451802391097694 104.76000000000039, 48.89278122096973 105.3000000000004, 49.26310797156133 105.8400000000004, 49.426374596098995 106.38000000000041, 49.865518261925864 106.92000000000041, 45.84020628469421 107.46000000000042, 43.56280096750155 108.00000000000043, 42.88866253526861 108.54000000000043, 41.21841814378929 109.08000000000044, 40.4862764419961 109.62000000000045, 40.014851052879806 110.16000000000045, 39.87452571536213 110.70000000000046, 39.74040647215827 111.24000000000046, 35.688059416041035 111.78000000000047, 33.46863244061569 112.32000000000048, 35.2969249042306 112.86000000000048, 35.228286882567716 113.40000000000049, 34.99223920632238 113.9400000000005, 34.83618720983594 114.4800000000005, 34.831779698224175 115.02000000000051, 34.80170427754303 115.56000000000051, 34.511704908424534 116.10000000000052, 32.3504811651331 116.64000000000053, 34.08772876268309 117.18000000000053, 34.229322948010434 117.72000000000054, 34.05699001574904 118.26000000000055, 34.08441159118782 118.80000000000055, 34.654970645038865 119.34000000000056, 35.16399100458908 119.88000000000056, 35.32558769853211 120.42000000000057, 35.617575194189364 120.96000000000058, 38.177840421707124 121.50000000000058, 39.94916438928124 122.04000000000059, 40.84686499209408 122.5800000000006, 41.08368334617083 123.1200000000006, 41.65864991163364 123.66000000000061, 42.26500489016156 124.20000000000061, 42.40283135150204 124.74000000000062, 42.648010163167655 125.28000000000063, 43.19955394161142 125.82000000000063, 43.81433621199643 126.36000000000064, 44.24151507747827 126.90000000000065, 44.53330562041912 127.44000000000065, 45.137530005827365 127.98000000000066, 45.773960405036426 128.52000000000066, 45.91178686637699 129.06000000000066, 46.15696560086674 129.60000000000065, 46.639304964236246 130.14000000000064, 47.10627013064941 130.68000000000063, 47.46973417497154 131.22000000000062, 47.65464615000345 131.76000000000062, 47.78946275400091 132.3000000000006, 48.03015494882979 132.8400000000006, 48.32580034726867 133.3800000000006, 48.74669007724447 133.92000000000058, 49.36574997232051 134.46000000000058, 50 135.00000000000057" stroke="#ed5565" stroke-width="1" stroke-opacity="1" fill="none" fill-opacity="0"></polyline></svg>)
   **/
  async sparkline() {
    const { app, ctx } = this;
    const rules = {
      tvl_type: { type: 'enum', trim: true, required: true, values: ['tvl_usd', 'tvl_eos'] },
      name: { type: 'string', required: true },
    };
    const params = {
      tvl_type: ctx.request.query.tvl_type,
      name: ctx.params.name,
    };
    ctx.validate(rules, params);
    const svg = await ctx.service.line.sparkline(params);
    ctx.type = 'svg';
    ctx.body = svg;
  }
}

module.exports = ProtocolsController;
